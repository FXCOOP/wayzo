/* eslint-disable no-console */
import 'dotenv/config';
import express from 'express';
import compression from 'compression';
import helmet from 'helmet';
import morgan from 'morgan';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import path from 'node:path';
import fs from 'node:fs';
import { fileURLToPath } from 'node:url';
import Database from 'better-sqlite3';
import { load as cheerioLoad } from 'cheerio';
import OpenAI from 'openai';

// ---------- paths ----------
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT = path.resolve(__dirname, '..');
const FRONTEND_DIR = path.join(ROOT, 'frontend');

let INDEX_FILE = path.join(FRONTEND_DIR, 'index.backend.html');
if (!fs.existsSync(INDEX_FILE)) {
  const alt = path.join(FRONTEND_DIR, 'index.html');
  if (fs.existsSync(alt)) INDEX_FILE = alt;
}

// ---------- app ----------
const app = express();
const PORT = Number(process.env.PORT || 10000);

app.set('trust proxy', 1);
app.use(
  helmet({
    contentSecurityPolicy: false,
    crossOriginOpenerPolicy: { policy: 'same-origin-allow-popups' },
  })
);
app.use(compression());
app.use(morgan('tiny'));
app.use(cors());
app.use(express.json({ limit: '1mb' }));
app.use(
  rateLimit({
    windowMs: 60_000,
    max: 200,
    standardHeaders: true,
    legacyHeaders: false,
    validate: { trustProxy: true },
  })
);

// static
app.use(express.static(FRONTEND_DIR));

// health
app.get('/api/health', (_req, res) => res.json({ ok: true }));
app.get('/healthz', (_req, res) => res.status(200).send('ok'));

// ---------- db ----------
const db = new Database(path.join(ROOT, 'wayzo.sqlite'));
db.exec(`
  CREATE TABLE IF NOT EXISTS plans (
    id TEXT PRIMARY KEY,
    created_at TEXT NOT NULL,
    payload TEXT NOT NULL
  );
`);
const savePlan = db.prepare('INSERT OR REPLACE INTO plans (id, created_at, payload) VALUES (?, ?, ?)');
const getPlan  = db.prepare('SELECT payload FROM plans WHERE id = ?');

const uid = () => (globalThis.crypto?.randomUUID?.() ?? Math.random().toString(36).slice(2));
const nowIso = () => new Date().toISOString();

// ---------- OpenAI (optional) ----------
const openai = process.env.OPENAI_API_KEY ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY }) : null;
const MODEL   = process.env.WAYZO_MODEL || 'gpt-4o-mini';

// force target="_blank" rel="noopener" on all links we return
function ensureNewTabTargets($) {
  $('a').each((_, a) => {
    const el = $(a);
    el.attr('target', '_blank');
    el.attr('rel', 'noopener');
  });
}

// ---------- preview ----------
app.post('/api/preview', async (req, res) => {
  const { destination = 'Your trip' } = req.body || {};
  const teaser_html = `
<section id="preview">
  <h3>${destination} — preview</h3>
  <ul>
    <li>Neighborhood clustering to reduce transit</li>
    <li>Must-see highlights with timed tickets</li>
    <li>Meals & alternates per day</li>
  </ul>
  <p class="cta">Generate full plan →</p>
</section>`.trim();
  res.json({ teaser_html });
});

// ---------- plan (baseline) ----------
app.post('/api/plan', async (req, res) => {
  const payload = req.body || {};
  const id = uid();

  try {
    let html;

    if (openai) {
      const msg = [
        { role: 'system', content: 'You are a travel planner. Return small HTML snippets only (no <html>/<body>).' },
        { role: 'user', content:
`Destination: ${payload.destination}
Dates: ${payload.start} → ${payload.end}
Travelers: ${payload.travelers}
Style: ${payload.level}
Prefs: ${payload.prefs || ''}` }
      ];
      const r = await openai.chat.completions.create({ model: MODEL, temperature: 0.6, messages: msg });
      html = r.choices?.[0]?.message?.content?.trim();
    }

    // If no API key or the model didn't return HTML, keep the tiny placeholder
    if (!html) {
      html = `<section id="preview"><p>Preview created.</p></section>`;
    }

    const $ = cheerioLoad(html);
    ensureNewTabTargets($);
    const enriched = $.root().html();

    savePlan.run(id, nowIso(), JSON.stringify({ id, data: payload, html: enriched }));
    res.json({ id, html: enriched, meta: payload });
  } catch (e) {
    console.error(e);
    const html = `<section id="preview"><p>Preview created.</p></section>`;
    savePlan.run(id, nowIso(), JSON.stringify({ id, data: payload, html }));
    res.json({ id, html, meta: payload });
  }
});

// ---------- “PDF” simple html view ----------
app.get('/api/plan/:id/pdf', (req, res) => {
  const row = getPlan.get(req.params.id);
  if (!row) return res.status(404).send('Not found');
  const saved = JSON.parse(row.payload || '{}');
  const html = `<!doctype html><html><head><meta charset="utf-8"><title>Wayzo Plan</title><link rel="stylesheet" href="/style.css"></head><body>${saved.html || ''}<p class="muted" style="margin-top:24px">Generated by Wayzo</p></body></html>`;
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.send(html);
});

// ---------- catch-all ----------
app.get(/^\/(?!api\/).*/, (_req, res) => res.sendFile(INDEX_FILE));

app.listen(PORT, () => console.log(`Wayzo backend running on :${PORT}`));
