import ExcelJS from 'exceljs';
import fs from 'node:fs';
import path from 'node:path';

export class ExcelGenerator {
  constructor() {
    this.workbook = new ExcelJS.Workbook();
  }

  async generateTripReport(tripData) {
    const { saved } = tripData;
    const d = saved?.data || {};
    const md = saved?.markdown || '';

    // Set workbook properties
    this.workbook.creator = 'Wayzo Travel Planning';
    this.workbook.lastModifiedBy = 'Wayzo';
    this.workbook.created = new Date();
    this.workbook.modified = new Date();

    // Create worksheets
    await this.createSummarySheet(d);
    await this.createItinerarySheet(md, d);
    await this.createBudgetSheet(d);
    await this.createChecklistSheet(d);

    // Generate buffer
    const buffer = await this.workbook.xlsx.writeBuffer();
    return buffer;
  }

  async createSummarySheet(data) {
    const worksheet = this.workbook.addWorksheet('Trip Summary', {
      headerFooter: {
        firstHeader: 'Wayzo Travel Report',
        firstFooter: 'Generated by Wayzo - Premium Travel Planning'
      }
    });

    // Set column widths
    worksheet.columns = [
      { width: 25 },
      { width: 40 },
      { width: 20 }
    ];

    // Header styling
    const headerStyle = {
      font: { bold: true, size: 16, color: { argb: 'FFFFFFFF' } },
      fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF6366F1' } },
      alignment: { horizontal: 'center', vertical: 'middle' }
    };

    // Add title
    worksheet.mergeCells('A1:C1');
    worksheet.getCell('A1').value = `${data.destination} Travel Report`;
    worksheet.getCell('A1').style = headerStyle;
    worksheet.getRow(1).height = 30;

    // Add trip details
    const details = [
      ['', '', ''],
      ['Trip Information', '', ''],
      ['Destination', data.destination || 'Not specified', ''],
      ['Start Date', data.start || 'Not specified', ''],
      ['End Date', data.end || 'Not specified', ''],
      ['Duration', this.daysBetween(data.start, data.end) + ' days', ''],
      ['', '', ''],
      ['Travelers', '', ''],
      ['Adults', data.adults || 0, ''],
      ['Children', data.children || 0, ''],
      ['Total Travelers', (data.adults || 0) + (data.children || 0), ''],
      ['', '', ''],
      ['Budget Information', '', ''],
      ['Total Budget', (data.budget || 0) + ' ' + (data.currency || 'USD'), ''],
      ['Travel Style', data.level === 'luxury' ? 'Luxury' : data.level === 'budget' ? 'Budget' : 'Mid-range', ''],
      ['Currency', data.currency || 'USD', ''],
      ['Budget per Person/Day', this.calculatePerPersonPerDay(data) + ' ' + (data.currency || 'USD'), ''],
      ['', '', ''],
      ['Preferences', '', ''],
      ['Dietary Requirements', data.diet || 'None specified', ''],
      ['Special Preferences', data.prefs || 'None specified', '']
    ];

    details.forEach((row, index) => {
      const rowNum = index + 2;
      worksheet.getRow(rowNum).values = row;
      
      if (row[0] && row[1] === '' && row[2] === '') {
        // Section headers
        worksheet.getCell(`A${rowNum}`).style = {
          font: { bold: true, size: 14, color: { argb: 'FF6366F1' } },
          alignment: { horizontal: 'left', vertical: 'middle' }
        };
        worksheet.mergeCells(`A${rowNum}:C${rowNum}`);
      } else if (row[0] && row[1]) {
        // Data rows
        worksheet.getCell(`A${rowNum}`).style = {
          font: { bold: true },
          alignment: { horizontal: 'left', vertical: 'middle' }
        };
        worksheet.getCell(`B${rowNum}`).style = {
          alignment: { horizontal: 'left', vertical: 'middle' }
        };
      }
    });

    // Add borders
    const range = worksheet.getCell('A1').address + ':' + worksheet.getCell(`C${details.length + 1}`).address;
    worksheet.getCell(range).border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
  }

  async createItinerarySheet(markdown, data) {
    const worksheet = this.workbook.addWorksheet('Daily Itinerary');

    // Set column widths
    worksheet.columns = [
      { width: 15 }, // Day
      { width: 20 }, // Date
      { width: 60 }, // Activities
      { width: 20 }  // Notes
    ];

    // Header
    const headerRow = worksheet.getRow(1);
    headerRow.values = ['Day', 'Date', 'Activities & Highlights', 'Notes'];
    headerRow.eachCell((cell) => {
      cell.style = {
        font: { bold: true, color: { argb: 'FFFFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF6366F1' } },
        alignment: { horizontal: 'center', vertical: 'middle' }
      };
    });
    headerRow.height = 25;

    // Parse markdown for daily activities
    const days = this.parseItineraryFromMarkdown(markdown, data.start);
    
    days.forEach((day, index) => {
      const rowNum = index + 2;
      const row = worksheet.getRow(rowNum);
      
      row.values = [
        day.dayNumber,
        day.date,
        day.activities.join('\n• '),
        day.notes || ''
      ];

      // Style the row
      row.eachCell((cell, colNumber) => {
        cell.style = {
          alignment: { 
            horizontal: colNumber === 3 ? 'left' : 'center', 
            vertical: 'top',
            wrapText: true 
          },
          border: {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
          }
        };
      });

      // Set row height based on content
      row.height = Math.max(20, day.activities.length * 15);
    });
  }

  async createBudgetSheet(data) {
    const worksheet = this.workbook.addWorksheet('Budget Breakdown');

    // Set column widths
    worksheet.columns = [
      { width: 25 },
      { width: 20 },
      { width: 15 },
      { width: 20 }
    ];

    // Header
    const headerRow = worksheet.getRow(1);
    headerRow.values = ['Category', 'Amount', 'Percentage', 'Daily Average'];
    headerRow.eachCell((cell) => {
      cell.style = {
        font: { bold: true, color: { argb: 'FFFFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF6366F1' } },
        alignment: { horizontal: 'center', vertical: 'middle' }
      };
    });

    // Calculate budget breakdown
    const totalBudget = data.budget || 1000;
    const days = this.daysBetween(data.start, data.end);
    const currency = data.currency || 'USD';
    
    const breakdown = this.calculateBudgetBreakdown(totalBudget, data.level);
    
    breakdown.forEach((item, index) => {
      const rowNum = index + 2;
      const row = worksheet.getRow(rowNum);
      
      row.values = [
        item.category,
        `${item.amount} ${currency}`,
        `${item.percentage}%`,
        `${Math.round(item.amount / days)} ${currency}`
      ];

      // Style
      row.eachCell((cell) => {
        cell.style = {
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
          }
        };
      });

      if (item.category === 'Total') {
        row.eachCell((cell) => {
          cell.style.font = { bold: true };
          cell.style.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE2E8F0' } };
        });
      }
    });

    // Add chart data for visualization
    const chartRow = breakdown.length + 4;
    worksheet.getCell(`A${chartRow}`).value = 'Budget Distribution Chart Data:';
    worksheet.getCell(`A${chartRow}`).style = {
      font: { bold: true, size: 14 }
    };

    breakdown.slice(0, -1).forEach((item, index) => {
      const rowNum = chartRow + index + 1;
      worksheet.getCell(`A${rowNum}`).value = item.category;
      worksheet.getCell(`B${rowNum}`).value = item.percentage;
    });
  }

  async createChecklistSheet(data) {
    const worksheet = this.workbook.addWorksheet('Travel Checklist');

    // Set column widths
    worksheet.columns = [
      { width: 5 },   // Checkbox
      { width: 40 },  // Item
      { width: 20 },  // Category
      { width: 25 }   // Notes
    ];

    // Header
    const headerRow = worksheet.getRow(1);
    headerRow.values = ['✓', 'Task/Item', 'Category', 'Notes'];
    headerRow.eachCell((cell) => {
      cell.style = {
        font: { bold: true, color: { argb: 'FFFFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF6366F1' } },
        alignment: { horizontal: 'center', vertical: 'middle' }
      };
    });

    // Pre-travel checklist
    const checklist = [
      { item: 'Book flights', category: 'Transportation', notes: 'Confirm dates and baggage allowance' },
      { item: 'Reserve accommodations', category: 'Accommodation', notes: 'Check cancellation policy' },
      { item: 'Check passport validity', category: 'Documents', notes: 'Must be valid for 6+ months' },
      { item: 'Obtain travel insurance', category: 'Insurance', notes: 'Include medical and trip coverage' },
      { item: 'Research visa requirements', category: 'Documents', notes: 'Check if visa required for destination' },
      { item: 'Exchange currency', category: 'Finance', notes: `Get ${data.currency || 'local currency'}` },
      { item: 'Notify banks of travel', category: 'Finance', notes: 'Prevent card blocks' },
      { item: 'Pack appropriate clothing', category: 'Packing', notes: 'Check weather forecast' },
      { item: 'Download offline maps', category: 'Technology', notes: 'Prepare for limited connectivity' },
      { item: 'Research local customs', category: 'Culture', notes: 'Respect local traditions' },
      { item: 'Book airport transfers', category: 'Transportation', notes: 'Arrange pickup/dropoff' },
      { item: 'Check vaccination requirements', category: 'Health', notes: 'Consult travel medicine clinic' },
      { item: 'Pack first aid kit', category: 'Health', notes: 'Include prescription medications' },
      { item: 'Download translation app', category: 'Technology', notes: 'Helpful for communication' },
      { item: 'Make restaurant reservations', category: 'Dining', notes: 'Popular places book up early' }
    ];

    checklist.forEach((item, index) => {
      const rowNum = index + 2;
      const row = worksheet.getRow(rowNum);
      
      row.values = ['☐', item.item, item.category, item.notes];

      // Style
      row.eachCell((cell, colNumber) => {
        cell.style = {
          alignment: { 
            horizontal: colNumber === 1 ? 'center' : 'left', 
            vertical: 'middle',
            wrapText: colNumber === 4
          },
          border: {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
          }
        };
      });
    });
  }

  parseItineraryFromMarkdown(markdown, startDate) {
    const days = [];
    const lines = markdown.split('\n');
    let currentDay = null;
    let dayCounter = 1;

    const startDateObj = startDate ? new Date(startDate) : new Date();

    lines.forEach(line => {
      const dayMatch = line.match(/^### Day (\d+)/);
      if (dayMatch) {
        if (currentDay) {
          days.push(currentDay);
        }
        
        const dayNum = parseInt(dayMatch[1]);
        const dayDate = new Date(startDateObj);
        dayDate.setDate(startDateObj.getDate() + dayNum - 1);
        
        currentDay = {
          dayNumber: `Day ${dayNum}`,
          date: dayDate.toLocaleDateString(),
          activities: [],
          notes: ''
        };
        dayCounter++;
      } else if (currentDay && line.trim()) {
        // Clean up line and add to activities
        const cleanLine = line.replace(/^[#*\-\s]+/, '').trim();
        if (cleanLine) {
          currentDay.activities.push(cleanLine);
        }
      }
    });

    if (currentDay) {
      days.push(currentDay);
    }

    return days;
  }

  calculateBudgetBreakdown(totalBudget, level) {
    const accommodationPct = level === 'luxury' ? 45 : level === 'budget' ? 35 : 40;
    const mealsPct = level === 'luxury' ? 25 : level === 'budget' ? 30 : 28;
    const activitiesPct = 20;
    const transportPct = 10;
    const miscPct = 100 - accommodationPct - mealsPct - activitiesPct - transportPct;

    const breakdown = [
      {
        category: '🏨 Accommodation',
        amount: Math.round(totalBudget * accommodationPct / 100),
        percentage: accommodationPct
      },
      {
        category: '🍽️ Meals & Dining',
        amount: Math.round(totalBudget * mealsPct / 100),
        percentage: mealsPct
      },
      {
        category: '🎯 Activities & Tours',
        amount: Math.round(totalBudget * activitiesPct / 100),
        percentage: activitiesPct
      },
      {
        category: '🚗 Transportation',
        amount: Math.round(totalBudget * transportPct / 100),
        percentage: transportPct
      },
      {
        category: '💼 Miscellaneous',
        amount: Math.round(totalBudget * miscPct / 100),
        percentage: miscPct
      },
      {
        category: 'Total',
        amount: totalBudget,
        percentage: 100
      }
    ];

    return breakdown;
  }

  calculatePerPersonPerDay(data) {
    const totalBudget = data.budget || 1000;
    const days = this.daysBetween(data.start, data.end);
    const people = Math.max(1, (data.adults || 0) + (data.children || 0));
    return Math.round(totalBudget / days / people);
  }

  daysBetween(start, end) {
    if (!start || !end) return 1;
    const startDate = new Date(start);
    const endDate = new Date(end);
    const diffTime = Math.abs(endDate - startDate);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) || 1;
  }
}

export default ExcelGenerator;